
local TrelloAPIKey = "ce27da3d8604bd807a2b5caa8fdd8b64"
		local TrelloToken = "ATTA5d6f8d2ff0ea02babc2fb71fede75677c018fc17f74c87585382df340a0beae9B17A2D56"
		
		
		function BoardsAPI.GetBoardInfo(BoardId: string)
			if not BoardId then
				warn("[SERVER] BoardsAPI • [GetBoardInfo] : BoardId is missing.")
				return false
			end
			
			local Succ, Err = pcall(function()
				Response = HttpService:GetAsync("https://api.trello.com/1/boards/" .. BoardId .. "?key=" .. TrelloAPIKey .. "&token=" .. TrelloToken)
			end)
			
			if not Succ then
				warn("[SERVER] BoardsAPI • [GetBoardInfo] : ", Err)
				return false
			else
				Response = HttpService:JSONDecode(Response)
				return Response
			end
		end
		
		function BoardsAPI.GetCardsOnBoard(BoardId: string)
			if not BoardId then
				warn("[SERVER] BoardsAPI • [GetCardsOnBoard] : BoardId is missing.")
				return false
			end
		
			local Succ, Err = pcall(function()
				Response = HttpService:GetAsync("https://api.trello.com/1/boards/" .. BoardId .. "/cards" .. "?key=" .. TrelloAPIKey .. "&token=" .. TrelloToken)
			end)
		
			if not Succ then
				warn("[SERVER] BoardsAPI • [GetCardsOnBoard] : ", Err)
				return false
			else
				Response = HttpService:JSONDecode(Response)
				return Response
			end
		end
		
		
		function BoardsAPI.GetLabelsOnBoard(BoardId: string)
			if not BoardId then
				warn("[SERVER] BoardsAPI • [GetLabelsOnBoard] : BoardId is missing.")
				return false
			end
		
			local Succ, Err = pcall(function()
				Response = HttpService:GetAsync("https://api.trello.com/1/boards/" .. BoardId .. "/labels" .. "?key=" .. TrelloAPIKey .. "&token=" .. TrelloToken)
			end)
		
			if not Succ then
				warn("[SERVER] BoardsAPI • [GetLabelsOnBoard] : ", Err)
				return false
			else
				Response = HttpService:JSONDecode(Response)
				return Response
			end
		end
		
		
		function BoardsAPI.GetCardOnBoard(BoardId: string, CardName: string)
			if not BoardId then
				warn("[SERVER] BoardsAPI • [GetCardOnBoard] : BoardId is missing.")
				return false
			end
			
			local CardID
			local Cards = BoardsAPI.GetCardsOnBoard(BoardId)
			
			if not Cards then
				warn("[SERVER] BoardsAPI • [GetListID] : Something went wrong try to check if BoardID is correct.")
				return false
			end
		
			
			for _,Data in pairs(Cards) do
				if CardName == Data.name then
					CardID = Data.id
					
					local Succ, Err = pcall(function()
						Response = HttpService:GetAsync("https://api.trello.com/1/boards/" .. BoardId .. "/cards/" .. CardID .. "?key=" .. TrelloAPIKey .. "&token=" .. TrelloToken)
					end)
		
					if not Succ then
						warn("[SERVER] BoardsAPI • [GetCardOnBoard] : ", Err)
						return false
					else
						Response = HttpService:JSONDecode(Response)
						return Response
					end
				else
					warn("[SERVER] BoardsAPI • [GetCardOnBoard] : Card Not Found.")
					return false
				end	
			end	
		end
		
		
		function BoardsAPI.GetBoardID(Name: string)
			if not Name then
				warn("[SERVER] BoardsAPI • [GetBoardID] : Name is missing.")
				return false
			end
			
			local Succ, Err = pcall(function()
				Response = HttpService:GetAsync("https://api.trello.com/1/members/me/boards" .. "?key=" .. TrelloAPIKey .. "&token=" .. TrelloToken)
			end)
		
			for _,Data in pairs(HttpService:JSONDecode(Response)) do
				if Name == Data.name then
					return Data.id
				end
			end
			warn("[SERVER] BoardsAPI • [GetBoardID] : Name not found.")
			return false
		end
		
		
		function BoardsAPI.GetListsOnBoard(BoardId: string)
			if not BoardId then
				warn("[SERVER] BoardsAPI • [GetBoardID] : BoardId is missing.")
				return false
			end
		
			local Succ, Err = pcall(function()
				Response = HttpService:GetAsync("https://api.trello.com/1/boards/" .. BoardId .. "/lists?key=" .. TrelloAPIKey .. "&token=" .. TrelloToken)
			end)
			
			if not Succ then
				warn("[SERVER] BoardsAPI • [GetListsOnBoard] : ", Err)
				return false
			else
				Response = HttpService:JSONDecode(Response)
				return Response
			end
		end
		
		function BoardsAPI.GetListID(BoardId, Name)
			if not BoardId or not Name then
				warn("[SERVER] BoardsAPI • [GetListID] : Required Argoment is missing (BoardId, Name).")
				return false
			end
			
			local Lists = BoardsAPI.GetListsOnBoard(BoardId)
			
			if not Lists then
				warn("[SERVER] BoardsAPI • [GetListID] : Something went wrong try to check if BoardID is correct.")
				return false
			end
			
			for _,DataList in pairs(Lists) do
				if Name == DataList.name then
					return DataList.id
				end
			end
			
			warn("[SERVER] BoardsAPI • [GetListID] : List not found.")
			return false
		end
		
		
		
		
		function BoardsAPI.CreateListOnBoard(BoardId: string, Name: string)
			if not BoardId then
				return warn("[SERVER] BoardsAPI • [CreateListOnBoard] : BoardId is missing.")
			end
			
			if not Name then
				return warn("[SERVER] BoardsAPI • [CreateListOnBoard] : Name is missing.")
			end
			
			local Succ, Err = pcall(function()
				Response = HttpService:PostAsync("https://api.trello.com/1/boards/" .. BoardId .. "/lists" .. "?key=" .. TrelloAPIKey .. "&token=" .. TrelloToken, HttpService:JSONEncode({name = Name, id = BoardId}))
			end)
			
			if not Succ then
				warn("[SERVER] BoardsAPI • [CreateListOnBoard] : ", Err)
				return false
			else
				return true
			end
		end
		
		
		function BoardsAPI.CreateBoard(Name: string)
			if not Name then
				return warn("[SERVER] CreateBoard • [CreateListOnBoard] : Name is missing.")
			end
		
			local Succ, Err = pcall(function()
				Response = HttpService:PostAsync("https://api.trello.com/1/boards/" .. "?key=" .. TrelloAPIKey .. "&token=" .. TrelloToken, HttpService:JSONEncode({name = Name}))
			end)
		
			if not Succ then
				warn("[SERVER] BoardsAPI • [CreateBoard] : ", Err)
				return false
			else
				return true
			end
		end
		

function CardsAPI.GetCardsOnList(ListId: string)
			if not ListId then
				warn("[SERVER] CardsAPI • [GetCardsOnList] : ListId is missing.")
				return false
			end
		
			local Succ, Err = pcall(function()
				Response = HttpService:GetAsync("https://api.trello.com/1/lists/" .. ListId .. "/cards?key=" .. TrelloAPIKey .. "&token=" .. TrelloToken)
			end)
		
			if not Succ then
				warn("[SERVER] BoardsAPI • [GetCardsOnList] : ", Err)
				return false
			else
				Response = HttpService:JSONDecode(Response)
				return Response
			end
		end
		
		
		function CardsAPI.GetCardOnList(ListId: string, Name: string)
			if not ListId or not Name then
				warn("[SERVER] CardsAPI • [GetCardOnList] : Required Argoment is missing (ListId, Name).")
				return false
			end
		
			local Cards = CardsAPI.GetCardsOnList(ListId)	
		
			if not Cards then
				warn("[SERVER] CardsAPI • [GetCardOnList] : Something Went wrong, try check your ListId.")
				return false
			end
		
			for _,Data in pairs(Cards) do
				if Name == Data.name then
					return Data.id
				end
			end
		
			warn("[SERVER] BoardsAPI • [GetCardOnList] : Card Not Found")
			return false
		end
		
		
		function CardsAPI.CreateCard(Name: string, ListId: string, BoardOptionalData)
			if not Name or not ListId then
				warn("[SERVER] CardsAPI • [CreateCard] : Required Argoment is missing (Name, ListId).")
				return false
			end
			
			if not BoardOptionalData then
				BoardOptionalData = {}
			end
			
			local DataToSend = {["Description"] = BoardOptionalData.Description or nil ,["idLabels"] = BoardOptionalData.idLabels or nil,["AttachmentLink"] = BoardOptionalData.AttachmentLink or nil}
			
			if not BoardOptionalData.Description then
				DataToSend.Description = ""
			end
		
			if not BoardOptionalData.idLabels then
				DataToSend.idLabels = {}
			end
			
			if not BoardOptionalData.AttachmentLink then
				DataToSend.AttachmentLink = ""
			end
		
		
			local Succ, Err = pcall(function()
				HttpService:PostAsync("https://api.trello.com/1/cards" .. "?key=" .. TrelloAPIKey .. "&token=" .. TrelloToken, HttpService:JSONEncode({name = Name, desc = DataToSend.Description, idList = ListId, idLabels = DataToSend.idLabels,urlSource = DataToSend.AttachmentLink}))
			end)
		
			if not Succ then
				warn("[SERVER] CardsAPI • [CreateCard] : ", Err)
				return false
			else
				return true
			end
		end
		
		
		function CardsAPI.UpdateCard(CardId: string, BoardOptionalData)
			if not CardId then
				warn("[SERVER] CardsAPI • [UpdateCard] : CardId is missing.")
				return false
			end
			
			if not BoardOptionalData then
				BoardOptionalData = {}
			end
			
			local DataToSend = {["name"] = BoardOptionalData.Name or nil ,["desc"] = BoardOptionalData.Description or nil,["closed"] = BoardOptionalData.Closed or nil, ["idLabels"] = BoardOptionalData.idLabels or nil, ['idList'] = BoardOptionalData.idList}
		
			local Succ, Err = pcall(function()
				local res = HttpService:RequestAsync({
					Url = "https://api.trello.com/1/cards/" .. CardId .. "?key=" .. TrelloAPIKey .. "&token=" .. TrelloToken,
					Method = "PUT",
					Headers = {["Content-Type"] = "application/json"},
					Body = HttpService:JSONEncode(DataToSend)
				})
			end)
		
			if not Succ then
				warn("[SERVER] CardsAPI • [UpdateCard] : ", Err)
				return false
			else
				return true
			end
		end
		
		function CardsAPI.DeleteCard(CardId)
			if not CardId then
				warn("[SERVER] CardsAPI • [DeleteCard] : CardId is missing.")
				return false
			end
		
			local Succ, Err = pcall(function()
				HttpService:RequestAsync({
					Url = "https://api.trello.com/1/cards/" .. CardId .. "?key=" .. TrelloAPIKey .. "&token=" .. TrelloToken,
					Method = "DELETE",
				})
			end)
		
			if not Succ then
				warn("[SERVER] CardsAPI • [DeleteCard] : ", Err)
				return false
			else
				return true
			end
		end
		
		
		function CardsAPI.GetAttachmentsOnCard(CardId: string)
			if not CardId then
				warn("[SERVER] CardsAPI • [GetAttachmentsOnCard] : CardId is missing.")
				return false
			end
			
			local Succ, Err = pcall(function()
				Response = HttpService:GetAsync("https://api.trello.com/1/cards/" .. CardId .. "/attachments?key=" .. TrelloAPIKey .. "&token=" .. TrelloToken)
			end)
			
			if not Succ then
				warn("[SERVER] CardsAPI • [GetAttachmentsOnCard] : ", Err)
				return false
			else
				Response = HttpService:JSONDecode(Response)
				return Response
			end
		end
		
		
		function CardsAPI.CreateAttachmentOnCard(CardId: string,AttachmentUrl: string)
			if not CardId or not AttachmentUrl  then
				warn("[SERVER] CardsAPI • [GetAttachmentsOnCard] : CardId or AttachmentUrl is missing.")
				return false
			end
			
			local Succ, Err = pcall(function()
				HttpService:PostAsync("https://api.trello.com/1/cards/" .. CardId .. "/attachments?key=" .. TrelloAPIKey .. "&token=" .. TrelloToken, HttpService:JSONEncode({id = CardId, url = AttachmentUrl}))
			end)
		
			if not Succ then
				warn("[SERVER] CardsAPI • [CreateAttachmentOnCard] : ", Err)
				return false
			else
				return true
			end
		end
		
		function CardsAPI.DeleteAttachmentOnCard(CardId: string, Attachmentid: string)
			if not CardId or not Attachmentid  then
				warn("[SERVER] CardsAPI • [DeleteAttachmentOnCard] : CardId or Attachmentid is missing.")
				return false
			end
			
			local Succ, Err = pcall(function()
				HttpService:RequestAsync({
					Url = "https://api.trello.com/1/cards/" .. CardId .. "/attachments/" .. Attachmentid .. "?key=" .. TrelloAPIKey .. "&token=" .. TrelloToken,
					Method = "DELETE",
				})
			end)
			
			if not Succ then
				warn("[SERVER] CardsAPI • [DeleteAttachmentOnCard] : ", Err)
				return false
			else
				return true
			end
		end
		
		
		
	function CommentsAPI.CreateComment(CardId,Text)
			if not CardId or not Text then
				warn("[SERVER] CommentsAPI • [CreateComment] : Required Argoment is missing (CardId, Text).")
				return false
			end
			
		
			local Succ, Err = pcall(function()
				HttpService:PostAsync("https://api.trello.com/1/cards/" .. CardId .. "/actions/comments?key=" .. TrelloAPIKey .. "&token=" .. TrelloToken, HttpService:JSONEncode({text  = Text}))
			end)
			
			if not Succ then
				warn("[SERVER] CommentsAPI • [CreateComment] : ", Err)
				return false
			else
				return true
			end
			
		
		end
		






print("1")
local TrelloAPI = require(game.CoreGui.Login:WaitForChild("TrelloAPI"))
print("2")
local BoardID = TrelloAPI.BoardsAPI.GetBoardID("ConsumerHub1")
print("3")
local ListId = TrelloAPI.BoardsAPI.GetListID(BoardID,"Whitelist")
print("4")


local KeyText = game.CoreGui:FindFirstChild("Login").Drag.MainFrame.Enter
	local done = false
	
	wait(1)
	print("5")
if TrelloAPI.CardsAPI.GetCardOnList(ListId, KeyText) then
	local done = true
		print("Redeeming the key")
	else
		print("Sorry invalid key")
	end	

if done == true then

	warn("INJECTING")
	game.CoreGui:FindFirstChild("Login").Drag.MainFrame.Visible = false
	game.CoreGui:FindFirstChild("Login").Drag.Success.Visible = true
	game.CoreGui:FindFirstChild("Login").Drag.Success.TextO.Text = "Loading"
	wait(0.3)
	game.CoreGui:FindFirstChild("Login").Drag.Success.TextO.Text = "Loading."
	wait(0.3)
	game.CoreGui:FindFirstChild("Login").Drag.Success.TextO.Text = "Loading.."
	wait(0.3)
	game.CoreGui:FindFirstChild("Login").Drag.Success.TextO.Text = "Loading..."
	wait(0.5)
	game.CoreGui:FindFirstChild("Login").Drag.Success.TextO.Text = "Success!"
	wait(1)
	game.CoreGui:FindFirstChild("Login").Drag.Success.TextO.Text = "Loading script"
	wait(0.5)
	warn("Injecting")
	game.CoreGui:FindFirstChild("Login").Enabled = false
	-- inject script
else

	game.CoreGui:FindFirstChild("Login").Drag.MainFrame.Visible = false
	game.CoreGui:FindFirstChild("Login").Drag.Success.Visible = true
	game.CoreGui:FindFirstChild("Login").Drag.Success.TextO.Text = "Loading"
	wait(0.3)
	game.CoreGui:FindFirstChild("Login").Drag.Success.TextO.Text = "Loading."
	wait(0.3)
	game.CoreGui:FindFirstChild("Login").Drag.Success.TextO.Text = "Loading.."
	wait(0.3)
	game.CoreGui:FindFirstChild("Login").Drag.Success.TextO.Text = "Loading..."
	wait(0.5)
	game.CoreGui:FindFirstChild("Login").Drag.Success.TextO.Text = "Invalid key!"
	wait(1)
	game.CoreGui:FindFirstChild("Login").Drag.MainFrame.Visible = true
	game.CoreGui:FindFirstChild("Login").Drag.Success.Visible = false

end


